{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Design Choices for Network Tic Tac Toe\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 This paper aims to discuss the design choices made for the network Tic Tac Toe game. We will explore the decisions made regarding the program structure, network communication, and user experience. The game is designed to be simple, efficient, and easy to understand, while ensuring a smooth and enjoyable experience for players.\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Introduction\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Tic Tac Toe is a classic game that is simple to implement and offers an opportunity to explore various programming techniques, making it a popular choice for educational purposes. In this implementation, we designed a network-based Tic Tac Toe game that allows two players to compete against each other using a command-line interface. The game operates in client or server mode, providing flexibility in deployment and usage.\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Program Structure\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The program is divided into several functions to ensure modularity and maintainability:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 print_board
\f1\fs24 : Displays the Tic Tac Toe board in a user-friendly format.\
\ls1\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 check_winner
\f1\fs24 : Determines if there is a winner based on the current board state.\
\ls1\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 handle_move
\f1\fs24 : Processes a player's move and updates the board.\
\ls1\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 server
\f1\fs24 : Implements the server-side logic.\
\ls1\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 client
\f1\fs24 : Implements the client-side logic.\
\ls1\ilvl0
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 main
\f1\fs24 : Parses command-line arguments and initiates the appropriate game mode.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 This modular approach allows for easy understanding of the code, simplifies maintenance, and enables future expansion if necessary.\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Network Communication\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The game uses the Transmission Control Protocol (TCP) for network communication. TCP was chosen because it provides reliable, ordered, and error-checked delivery of a stream of data between the server and client. This ensures that the game state is accurately transmitted between the two players.\
Socket programming is employed to create the server and client communication channels. The server listens on a specified port for incoming connections, while the client connects to the server using the hostname and port provided. Once a connection is established, the server and client exchange data representing the game state.\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 User Experience\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The game employs a simple command-line interface to facilitate user interaction. This choice was made to keep the program lightweight, making it accessible to a wide range of users with minimal system requirements.\
The game's user interface displays the Tic Tac Toe board as a 3x3 grid with numbers representing each cell's position. Players input a number corresponding to an empty cell on the board to make their move. This simple and intuitive method allows players to quickly understand the game's mechanics.\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Conclusion\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 In designing the network Tic Tac Toe game, we focused on creating a simple, efficient, and enjoyable experience for players. By using a modular program structure, implementing reliable network communication, and providing an intuitive user interface, we believe the game achieves these goals. The choices made in this implementation lay a solid foundation for further improvements and potential expansions, such as adding support for multiple concurrent games or incorporating a graphical user interface.\
}